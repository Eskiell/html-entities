import * as fs from 'fs';
import * as path from 'path';
import * as namedReferences from '../src/named-references.source.json';

const getObjectEntries = Object.entries as <T>(obj: T) => [keyof T, T[keyof T]][];

type Level = keyof typeof namedReferences;
interface LevelData {
    entities: Record<string, string>;
    characters: Record<string, string>;
}

const result: {[key in Level]?: LevelData} = {};

for (const [level, entityInfos] of getObjectEntries(namedReferences)) {
    const levelData: LevelData = {entities: {}, characters: {}};
    for (const [entity, {characters}] of getObjectEntries(entityInfos)) {
        levelData.entities[entity] = characters;
        levelData.characters[characters] = entity;
    }
    result[level] = levelData;
}

const processedNamedReferences = `// This file is autogenerated by tools/process-named-references.ts

export type NamedReferences = {
    [K in ${Object.keys(result)
        .map((level) => `'${level}'`)
        .join(' | ')}]: {
        entities: Record<string, string>;
        characters: Record<string, string>;
    }
};
export const namedReferences: NamedReferences = ${JSON.stringify(result, null, 4)};\n`;

fs.writeFileSync(path.join(__dirname, '..', 'src', 'named-references.ts'), processedNamedReferences);
